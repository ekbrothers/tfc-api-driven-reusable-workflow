name: "Terraform Plan Action"
description: "Automate Terraform plan operations and provide feedback on pull requests."

inputs:
  TF_CLOUD_ORGANIZATION:
    description: "Terraform Cloud Organization Name"
    required: true
  TF_API_TOKEN:
    description: "Terraform API Token"
    required: true
  TF_WORKSPACE:
    description: "Terraform Workspace"
    required: true
  WORKING_DIRECTORY:
    description: "Directory of Terraform Configurations"
    required: true
    default: "./"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      shell: bash

    - name: Upload Configuration
      uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      with:
        workspace: ${{ inputs.TF_WORKSPACE }}
        directory: ${{ inputs.WORKING_DIRECTORY }}
        speculative: true
      shell: bash

    - name: Create Plan Run
      uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      with:
        workspace: ${{ inputs.TF_WORKSPACE }}
        configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
        plan_only: true
      shell: bash

    - name: Get Plan Output
      uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      with:
        plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
      shell: bash

    - name: Update PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
          });
          const output = `#### Terraform Cloud Plan Output
              \`\`\`
              Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
              \`\`\`
              [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
              `;
          // 3. Delete previous comment so PR timeline makes sense
          if (botComment) {
            github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
      shell: bash
